'''
[59]
입력 된 정수를 비트단위로 참/거짓을 바꾼 후 정수로 출력해보자.

예를 들어 1이 입력되었을 때 저장되는
1을 32비트 2진수로 표현하면 00000000 00000000 00000000 00000001 이고,
~1은 11111111 11111111 11111111 11111110 가 되는데 이는 -2를 의미한다.
'''
n = int(input())
print(~n)

'''
[60]
입력된 정수 두 개를 비트단위로 and 연산한 후 그 결과를 정수로 출력해보자.

예를 들어 3과 5가 입력되었을 때를 살펴보면
3 : 00000000 00000000 00000000 00000011
5 : 00000000 00000000 00000000 00000101
3 & 5 : 00000000 00000000 00000000 00000001
이 된다.
'''
a, b = map(int, input().split())
print(a & b)

'''
[우리밋이 알려주는 Bonus 문제 (2)]
1개의 정수형 입력이 들어오면 비트 연산을 이용하여 '홀수'와 '짝수'를 판별하여라
'''
n = int(input())
if(n & 1 == 1):
    print("홀수")
else:
    print("짝수")

'''
[61]
입력된 정수 두 개를 비트단위로 or 연산한 후 그 결과를 정수로 출력해보자.

예를 들어 3과 5가 입력되었을 때를 살펴보면
3 : 00000000 00000000 00000000 00000011
5 : 00000000 00000000 00000000 00000101
3 | 5 : 00000000 00000000 00000000 00000111
이 된다.
'''
a, b = map(int, input().split())
print(a | b)

'''
[62]
입력된 정수 두 개를 비트단위로 xor 연산한 후 그 결과를 정수로 출력해보자.

예를 들어 3과 5가 입력되었을 때를 살펴보면
3 : 00000000 00000000 00000000 00000011
5 : 00000000 00000000 00000000 00000101
3 ^ 5 : 00000000 00000000 00000000 00000110
이 된다.
'''
a, b = map(int, input().split())
print(a ^ b)  # 서로 다를 때 1

'''
[우리밋이 알려주는 Bonus 문제 (2-2]
문제 직사각형을 만드는 데 필요한 4개의 점 중 3개의 좌표가 주어질 때, 나머지 한 점의 좌표를 구하려고 합니다. 
점 3개의 좌표가 들어있는 배열 v가 매개변수로 주어질 때, 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 return 하도록 solution 함수를 완성해주세요.

단, 직사각형의 각 변은 x축, y축에 평행하며, 반드시 직사각형을 만들 수 있는 경우만 입력으로 주어집니다.

제한사항
1. v는 세 점의 좌표가 들어있는 2차원 배열입니다.
2. v의 각 원소는 점의 좌표를 나타내며, 좌표는 [x축 좌표, y축 좌표] 순으로 주어집니다.
3. 좌표 값은 1 이상 10억 이하의 자연수입니다.
4. 직사각형을 만드는 데 필요한 나머지 한 점의 좌표를 [x축 좌표, y축 좌표] 순으로 담아 return 해주세요.

입력(1)
[[1,4], [3,4], [3,10]]

출력(1)
[1,10]

입력(2)
[[1,1], [2,2], [1,2]]

출력(2)
[2,1]
'''
list = [[1, 4], [3, 4], [3, 10]]

result = []
result.append(list[0][0] ^ list[1][0] ^ list[2][0])
result.append(list[0][1] ^ list[1][1] ^ list[2][1])
# XOR 연산자는 서로 다른 것을 출력한다.
# 0001 ^ 0011 ^ 0011 = 0001
# 0110 ^ 0110 ^ 1010 = 1010
print(result)
