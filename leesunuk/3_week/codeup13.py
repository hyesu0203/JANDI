'''
78번: 짝수 합 구하기
정수(1 ~ 100) 1개를 입력받아 1부터 그 수까지 짝수의 합을 구해보자.

입력
정수 1개가 입력된다. (0 ~ 100)

5

출력
1부터 입력된 수까지 짝수의 합을 출력한다.

6
'''


def PT(a):
    b = 0
    for i in range(0, a+1):
        if i % 2 == 0:
            b += i
    print(b)


a = int(input("정수 1개를 입력해주세요: "))
PT(a)

# 다른방법

num = int(input())

answer = 0
for i in range(2, num+1, 2):
    answer += i
print(answer)

'''
차이점: 내 방법은 1부터 순서대로(1, 2, 3, 4, 5...) 숫자들을 하나씩 받아 짝수인지를 판별한 것이고,
다른 방법은 처음 받을때부터 2의 차이를 두고(2 4 6 8...) 숫자들을 받은 것이다. 또 나는 함수를 만들어 호출해 사용한 반면에
다른 방법은 함수를 사용하지 않고 풀었다.
'''

'''
79번: 원하는 문자가 입력될 때까지 반복 출력하기

'q'가 입력될 때까지 입력한 문자를 계속 출력하는 프로그램을 작성해보자.

입력
문자들이 1개씩 계속해서 입력된다.

x b k d l q g a c

출력
'q'가 입력될 때까지 입력된 문자를 줄을 바꿔 한 줄씩 출력한다.

x
b
k
d
l
q
'''
a = list(input("원하는 문자들을 입력해주세요: ").split())

for i in a:
    if i == "q":
        break
    else:
        print(i)

'''
80번: 언제까지 더해야 할까?
1, 2, 3 ... 을 계속 더해 나갈 때,
그 합이 입력한 정수(0 ~ 1000)보다 같거나 작을 때까지 계속 더하는 프로그램을 작성해보자.

즉, 1부터 n까지 정수를 계속 더한다고 할 때,
어디까지 더해야 입력한 수보다 같거나 커지는지 알아보고자 하는 문제이다.
'''

a = int(input("정수 1개를 입력해주세요: "))

b = 0
c = 0
while 1:
    b += 1
    c = c+b
    if c >= a:
        print(b)
        break

# 다른방법

a = int(input("정수 1개를 입력해주세요: "))
total = 0
for i in range(1, a+1):
    total += i
    if total >= a:
        print(i)
        break

'''
내 방법은 while문에 무한루프를 걸어 진행을 하다가 모든 수를 더한 C의 값이 A보다 커지게 되면 break을 걸어 프로그램을 멈추게 하였고,
다른 방법에선 for문으로 받아 1부터 받은수까지 돌려(1부터 모든 수를 더하기 때문에 받은 수까지 돌려도 받은수보다 커지기 전에 프로그램이 종료되기 때문에 상관 X)
수를 받는 방법을 선택했다.
'''

'''
 81번: 주사위를 2개 던지면?

1부터 n까지, 1부터 m까지 숫자가 적힌 서로 다른 주사위 2개를 던졌을 때 나올 수 있는 모든 경우를 출력해보자.

입력
주사위 2개의 면의 개수 n, m이 공백을 두고 입력된다.
단, n, m은 10이하의 자연수

2 3
출력
나올 수 있는 주사위의 숫자를 한 세트씩 줄을 바꿔 모두 출력한다.
첫 번째 수는 n, 두 번째 수는 m으로 고정해 출력하도록 한다.

1 1
1 2
1 3
2 1
2 2
2 3
'''
n, m = map(int, input("10이하의 수를 입력해주세요: ").split())

i = 0
while n > i:
    i += 1
    for j in range(1, m+1):
        print(i, j)

'''
82번: 16진수 구구단

16진수(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F)를 배운 영일(01)이는 16진수끼리 곱하는 16진수 구구단에 대해서 궁금해졌다.

A, B, C, D, E, F 중 하나가 입력될 때, 1부터 F까지 곱한 16진수 구구단의 내용을 출력해보자.
(단, A ~ F 까지만 입력된다.)
'''

a = input("16진수의 수 중 하나를 입력해주세요: ")
for i in range(1, 16):
    print(a+"*"+hex(i)[2:].upper()+"=", hex(int(a, 16)*i)[2:].upper())

'''
83번:  3 6 9 게임의 왕이 되자

3 6 9 게임을 하던 영일이는 3 6 9 게임에서 잦은 실수로 계속해서 벌칙을 받게 되었다.
3 6 9 게임의 왕이 되기 위한 마스터 프로그램을 작성해 보자.

입력
10 보다 작은 정수 1개가 입력된다. (1 ~ 9)

9
출력
1 부터 그 수까지 순서대로 공백을 두고 수를 출력하는데, 3 또는 6 또는 9인 경우 그 수 대신 영문 대문자 X 를 출력한다.

1 2 X 4 5 X 7 8 X
'''
a = int(input("정수 1개를 입력해주세요: "))

for i in range(1, a+1):
    if i % 3 == 0:
        print('X')
    else:
        print(i)

'''
84번: 빛 섞어 색 만들기

빨강(red), 초록(green), 파랑(blue) 빛을 섞어 여러 가지 빛의 색을 만들어 내려고 한다.

빨강(r), 초록(g), 파랑(b) 각각의 빛의 개수가 주어질 때,
(빛의 강약에 따라 0 ~ n-1 까지 n가지의 빛 색깔을 만들 수 있다.)

주어진 rgb 빛들을 다르게 섞어 만들 수 있는 모든 경우의 조합(r g b)과 총 가짓 수를 계산해보자.
'''

a, b, c = map(int, input("R G B 값을 입력해주세요: ").split())

d = 0
for x in range(0, a+1):
    for y in range(0, b+1):
        for z in range(0, c+1):
            print(x, y, z)
            d += 1
print(d)

'''
85번:  소리 파일 저장용량 계산하기
1초 동안 마이크로 소리강약을 체크하는 수를 h (헤르쯔, Hz 는 1초에 몇 번? 체크하는가를 의미한다.)

한 번 체크한 결과를 저장하는 비트 b (2비트를 사용하면 0 또는 1 두 가지, 16비트를 사용하면 65536가지..)

좌우 등 소리를 저장할 트랙 개수인 채널 c (모노는 1개, 스테레오는 2개의 트랙으로 저장함을 의미한다.)

녹음할 시간 s가 주어질 때, 필요한 저장 용량을 계산하는 프로그램을 작성해보자.

**문제의 핵심 포인트**
실제로 일반적인 CD 음질(44.1KHz, 16bit, 스테레오)로 1초 동안 저장하려면
44100 * 16 * 2 * 1 bit의 저장공간이 필요
이렇게 녹음하는 방식을 PCM(Pulse Code Modulation) 방법이라고 하는데, 압축하지 않은 순수한(raw) 소리 데이터 파일은 대표적으로 *.wav 가 있다.

**틈새 자료구조**
8 bit(비트)           = 1byte(바이트)
1024 Byte(2^10 byte) = 1KB(킬로 바이트)
1024 KB(2^10 KB)     = 1MB(메가 바이트)
1024 MB(2^10 MB)     = 1GB(기가 바이트)
1024 GB(2^10 GB)     = 1TB(테라 바이트)

입력
h, b, c, s 가 공백을 두고 입력된다.
h는 48,000이하, b는 32이하(단, 8의배수), c는 5이하, s는 6,000이하의 자연수이다.

44100 16 2 10

출력
필요한 저장 공간을 MB 단위로 바꾸어 출력한다.
단, 소수점 둘째 자리에서 반올림해 첫째 자리까지 출력하고 MB를 공백을 두고 출력한다.

1.7 MB
'''

h, b, c, s = map(int, input("헤르쯔, 비트, 채널, 시간을 입력해주세요: ").split())
print(round(h*b*c*s/8/1024/1024, 1), "MB")


# 고칠점
'''
계산이 너무 난해하기 때문에 보기 쉽게
a=h*b*c*s
b=8*(1024**2)
print(round(a/b), 1)
처럼 정리해주거나 다른 방법으로 식을 정리해주는게 좋을 거 같다
'''

'''
86번: 그림 파일 저장용량 계산하기
이미지의 가로 해상도 w, 세로 해상도 h, 한 픽셀을 저장하기 위한 비트 b 가 주어질 때,
압축하지 않고 저장하기 위해 필요한 저장 용량을 계산하는 프로그램을 작성해 보자.

**문제의 핵심 포인트**
실제로 일반적인 1024 * 768 사이즈(해상도)의 각점에 대해
24비트(rgb 각각 8비트씩 3개)로 저장하려면 1024 * 768 * 24 bit의 저장 용량이 필요하다.
이렇게 이미지의 원래(raw) 데이터를 압축하지 않고 그대로 저장하는 대표적인 이미지 파일이 *.bmp 파일이며,
 비트로 그림을 구성한다고 하여 비트맵 방식 또는 래스터 방식이라고 한다.

**틈새 자료구조**
8 bit(비트)           = 1byte(바이트)
1024 Byte(2^10 byte) = 1KB(킬로 바이트)
1024 KB(2^10 KB)     = 1MB(메가 바이트)
1024 MB(2^10 MB)     = 1GB(기가 바이트)
1024 GB(2^10 GB)     = 1TB(테라 바이트)

입력
w, h, b 가 공백을 두고 입력된다. 단, w, h는 모두 정수이고 1~1024 이다. b는 40이하의 4의 배수이다.

1024 768 24

출력
필요한 저장 공간을 MB 단위로 바꾸어 출력한다. 소수점 이하 셋째 자리에서 반올림해 둘째 자리까지 출력한 뒤 MB를 출력한다.

2.25 MB
'''
w, h, b = map(int, input("가로 해상도, 세로 해상도, 한 픽셀을 입력해주세요: ").split())
x = w*h*b
y = 8*(1024**2)
print(round(x/y, 2), "MB")

'''
87번:여기까지! 이제 그만~

1, 2, 3 ... 을 순서대로 계속 더해나갈 때, 그 합이 입력한 정수보다 작을 동안만 계속 더하는 프로그램을 작성해보자.

즉, 1부터 n까지 정수를 계속 더한다고 할 때, 어디까지 더해야 입력한 수보다 같거나 커지는지 알아보고자 하는 문제이다.

하지만, 이번에는 그 때의 합을 출력해야 한다.

예를 들어 57을 입력하면 1+2+3+...+8+9+10=55에 다시 11을 더해 66이 될 때, 그 값 66이 출력되어야 한다.

입력
언제까지 합을 계산할 지, 정수 1개를 입력받는다.
단, 입력되는 자연수는 100,000,000이하이다.

57

출력
1, 2, 3, 4, 5 ... 순서대로 계속 더해가다가, 그 합이 입력된 정수보다 커지거나 같아지는 경우, 그때까지의 합을 출력한다.

66
'''

a = int(input("정수를 1개 입력해주세요: "))
b = 0

for i in range(0, a):
    if b >= a:
        break
    else:
        i += 1
        b = b+i
print(b)

'''
88번:  3의 배수는 통과?

1부터 입력한 정수까지 1씩 증가시켜 출력하는 프로그램을 작성하되, 3의 배수인 경우는 출력하지 않도록 만들어보자.

예를 들면, 1 2 4 5 7 8 10 11 13 14 ... 와 같이 출력하는 것이다.

입력
정수 1개를 입력받는다.
(1 ~ 100)

10
출력
1부터 입력한 정수보다 작거나 같을 때까지 1씩 증가시켜 출력하되 3의 배수는 출력하지 않는다.

1 2 4 5 7 8 10
'''
a = int(input("정수를 1개 입력해주세요: "))

for i in range(0, a+1):
    if i % 3 != 0:
        print(i)

'''
89번:수 나열하기1

어떤 규칙에 따라 수를 순서대로 나열한 것을 수열(series)이라고 한다.

예를 들어 1 4 7 10 13 16 19 22 25 ... 은 1부터 시작해 이전에 만든 수에 3을 더해 다음 수를 만든 수열이다.

이러한 것을 수학에서는 앞뒤 수들의 차이가 같다고 하여 등차(차이가 같다의 한문 말) 수열이라고 한다.
수열을 알게 된 영일이는 갑자기 궁금해졌다.

"그럼.... 123번째 나오는 수는 뭘까?"

영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

시작 값(a), 등차(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때 n번째 수를 출력하는 프로그램을 만들어보자.

입력
시작 값(a), 등차의 값(d), 몇 번째 수 인지를 의미하는 정수(n)가 공백을 두고 입력된다.(모두 0 ~ 100)

1 3 5
출력
n번째 수를 출력한다.

13
'''
a, d, n = map(int, input("시작값, 등차값, 몇번째 수인지 입력해주세요: ").split())
b = [1]
e = 1
for i in range(a, n):
    e = e+d
    b.append(e)
print(b[-1])

# 다른 방법

a, d, n = map(int, input().split())

i = a
count = 0
arith = []
while count < n:
    arith.append(i)
    i += d
    count += 1
print(arith[-1])


# 차이점
# 나는 for문을 사용해 문제를 해결했고, 다른 방법은 while문을 활용해 문제를 해결했다.


'''
90번: 수 나열하기2

어떤 규칙에 따라 수를 순서대로 나열한 것을 수열이라고 한다.

예를 들어 2 6 18 54 162 486 ... 은 2부터 시작해 이전에 만든 수에 3을 곱해 다음 수를 만든 수열이다.

이러한 것을 수학에서는 앞뒤 수들의 비율이 같다고 하여 등비(비율이 같다의 한문 말) 수열이라고 한다.

등비 수열을 알게된 영일이는 갑자기 궁금해졌다.

"그럼.... 13번째 나오는 수는 뭘까?"

영일이는 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

시작 값(a), 등비(r), 몇 번째인지를 나타내는 정수(n)가 입력될 때 n번째 수를 출력하는 프로그램을 만들어보자.

입력
시작 값(a), 등비의 값(r), 몇 번째 인지를 나타내는 정수(n)가 공백을 두고 입력된다.(모두 0 ~ 10)

2 3 7
출력
n번째 수를 출력한다.

1458
'''
a, r, n = map(int, input("시작값, 등비값, 몇번째 수인지 입력해주세요: ").split())
b = [2]
e = 2
for i in range(a, n+1):
    e = e*r
    b.append(e)
print(b[-1])

# 다른 방법

a, r, n = map(int, input().split())

i = a
count = 0
geom = []
while count < n:
    geom.append(i)
    i *= r
    count += 1
print(geom[-1])


# 차이점:
# 등차 수열일때와 같이 for문을 사용해 풀었냐 while문을 사용해 풀었냐의 차이다


'''
91번: 수 나열하기3

어떤 규칙에 따라 수를 순서대로 나열한 것을 수열이라고 한다.

예를 들어 1 -1 3 -5 11 -21 43 ... 은 1부터 시작해 이전에 만든 수에 -2를 곱한 다음 1을 더해 다음 수를 만든 수열이다.

이런 이상한 수열을 알게 된 영일이는 또 궁금해졌다.

"그럼.... 13번째 나오는 수는 뭘까?"

영일이는 물론 수학을 아주 잘하지만 이런 문제는 본 적이 거의 없었다...

그래서 프로그램을 만들어 더 큰 수도 자동으로 계산하고 싶어졌다.

시작 값(a), 곱할 값(m), 더할 값(d), 몇 번째인지를 나타내는 정수(n)가 입력될 때, n번째 수를 출력하는 프로그램을 만들어보자.

입력
시작 값(a), 곱할 값(m), 더할 값(d), 몇 번째 인지를 나타내는 정수(n)가 공백을 두고 입력된다.
(a, m, d는 -50 ~ +50, n은 10이하의 자연수)

1 -2 1 8

출력
n번째 수를 출력한다.

-85
'''
a, m, d, n = map(int, input("시작 값, 곱합 값, 더할 값, 몇번째 수인지 입력해주세요: ").split())
c = [a]
h = a
while a < n:
    print(c)
    h = (h*m)+d
    c.append(h)
    a += 1
print(c[-1])

'''
92번: 함께 문제 푸는 날

같은 날 동시에 가입한 3명의 사람들이 온라인 채점시스템에 들어와 문제를 푸는 날짜가 매우 규칙적이라고 할 때, 다시 모두 함께 문제를 풀게 되는 그날은 언제일까?

예를 들어 3명이 같은 날 가입/등업하고, 각각 3일마다, 7일마다, 9일마다 한 번씩 들어온다면, 처음 가입하고 63일 만에 다시 3명이 함께 문제를 풀게 된다.

입력
같은 날 동시에 가입한 인원 3명이 규칙적으로 방문하는, 방문 주기가 공백을 두고 입력된다. (단, 입력값은 100이하의 자연수이다.)

3 7 9
출력
3명이 다시 모두 함께 방문해 문제를 풀어보는 날(동시 가입/등업 후 며칠 후?)을 출력한다.

63
'''

a, b, c = map(int, input("방문 주기 3번을 입력해주세요: ").split())
day = 1
while 1:
    day += 1
    if day % a == 0 and day % b == 0 and day % c == 0:
        break
print(day)
